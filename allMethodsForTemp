import org.apache.commons.csv.*;
import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.*;

/**
 * Write a description of class coldestInManyDays here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class coldestInManyDays{
    public CSVRecord coldestHourInFile (CSVParser parser) {
      //start with smallestSoFar as nothing
     CSVRecord smallestSoFar = null;
    //for each row (currentRow) int the CSV file
     for (CSVRecord currentRow: parser) {
         //if smallestSoFar is nothing
           if (smallestSoFar == null) {
         //set smallestSoFar to the currentRowsmallestSoFar = currentRow;}
        //otherwise
          }else {
         double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
         double smallestTemp = Double.parseDouble(smallestSoFar.get("TemperatureF"));
          if (currentTemp < smallestTemp) {
            //if so, update smallestSoFar to currentRowsmallestSoFar = currentRow;
          }
        }
      }
       //the smallestSoFar is the answer
     return smallestSoFar;
      }
      public CSVRecord coldestInManyDays() {
       CSVRecord smallestSoFar = null;
      DirectoryResource dr = new DirectoryResource();
      String file = "";
      for (File f:dr.selectedFiles()){
      FileResource fr = new FileResource(f);
      CSVRecord currentRow = coldestHourInFile(fr.getCSVParser());
      if (smallestSoFar == null) {
         smallestSoFar = currentRow;
         file = f.getAbsolutePath();
      } else 
       if (smallestSoFar.equals("-9999")){
         continue;  
      }
      {
      double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
      double smallestTemp = Double.parseDouble(smallestSoFar.get("TemperatureF"));
      if (currentTemp < smallestTemp) {
       smallestSoFar = currentRow;
       file= f.getAbsolutePath();
         }
       }
      }
    System.out.println(file);
    return smallestSoFar;
   }
     public void testColdestInManyDays(){
      CSVRecord coldest = coldestInManyDays();
      System.out.println(coldest);
      }
   public CSVRecord lowestHumidityInFile(CSVParser parser){
    CSVRecord lowestHumiditySoFar = null;
     for (CSVRecord currentRow: parser){
           if (lowestHumiditySoFar == null){
        lowestHumidity = currentRow;
          
        }else {
        if (currentRow.get("Humidity").equals("N/A")){
            continue;
       }
      double currentHumidity = Double.parseDouble(currentRow.get("Humidity"));
      double lowestHumidity = Double.parseDouble(smallestSoFar.get("Humidity"));
      if (currentHumidity< lowestHumidity) {
       lowestHumiditySoFar = currentRow;
      
       }
      }
      return lowestHumiditySoFar;
     }
     
    }
    public void testLowestHumidity(){
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        CSVRecord lowest = lowestHumidityInFile();
        System.out.println("lowest humidity was " + lowest);
    }
     public CSVRecord lowestHumidityInManyDays(){
        DirectoryResource dr = new DirectoryResource();
        for (File f: dr.selectedFiles()){
            FileResource fr = new FileResource(f);
            CSVRecord currentRow = lowestHumidityInFile(fr.getCSVParser());
            if (lowestSoFar == null){
                lowestSoFar = currentRow;
            }        
            if (currentRow.get("Humidity").equals("N/A")){
            continue;
              }
            }else{
              double currentHumidity = Double.parseDouble(currentRow.get("Humidity"));
              double lowestHumidity = Double.parseDouble(smallestSoFar.get("Humidity"));
             if (currentHumidity< lowestHumidity) {
                  lowestSoFar = currentRow;
            }
        }
      return lowestHumiditySoFar;
      
      }
    
     public void testLowestHumidity(){
         FileResource fr = new FileResource();
         CSVParser parser= fr.getCSVParser();
         CSVRecord lowest = lowestHumidityInFile(parser);
         System.out.println("lowest humidty was " + lowest);
     }
     public double averageTemperature(CSVParser parser){
        double averageTemp= 0;
        double sum = 0;
        int counter = 0;
        
        for (CSVRecord record:parser){
            sum+= Double.parseDouble(record.get("TemperatureF");
            counter++;
        }
         averageTemp = sum/counter;
         return averageTemp;
     }
     public static double averageTemperatureWithHighHumidityInFile(CSVParser parser, double level){
         double averagetemp;
         double sum = 0;
         int counter = 0;
         for (CSVRecord record: parser){
            double humidity = Double.parseDouble(record.get("Humidity");
             if(humidity >= level){
                 sum+= Double.parserDouble(record.get("TemperatureF"));
                 counter++;
            }
        }
        averageTemp = sum/counter;
        return averageTemp;
     }
     public void testAverageTemp(){
         FileResource fr = new FileResource();
         CSVParser parser= fr.getCSVParser();
         double average = averageTemperature(parser);
         System.out.println(average);
     }
     public void testAverageTempWHumidity(){
         FileResource fr = new FileResource();
         CSVParser parser= fr.getCSVParser();
         double averageTempHumidity = averageTemperatureWithHumidityInFile(parser,80);
         System.out.println("average temp was "+ largest.get("TemperatureF");
     }
     
     
    }
